{"version":3,"sources":["Components/Info.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","cod","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uPAUeA,G,MARF,kBACT,6BACI,6IACA,4LCKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCYOC,EAfC,SAAAN,GAAK,OACjB,yBAAKO,UAAU,aACVP,EAAMQ,MACH,6BACI,oHAAoBR,EAAMQ,KAA1B,KAAkCR,EAAMS,SACxC,kGAAiBT,EAAMU,KAAvB,WACA,gFAAcV,EAAMW,SAApB,uBACA,8DAAWX,EAAMY,SAGzB,uBAAGL,UAAU,SAASP,EAAMa,SCN9BC,EAAU,mCAiFDC,E,4MA7EbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFrB,iCAKXC,MAAM,oDAAD,OAAqDjB,EAArD,kBAAmEM,EAAnE,kBALM,cAIPY,EAJO,gBAMMA,EAAQC,OANd,OAOI,SADXC,EANO,QAOJC,KACHjB,EAASgB,EAAKE,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZ5B,KAAMkB,EAAKW,KAAK7B,KAChBF,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKE,IAAIrB,QAClBE,SAAUiB,EAAKW,KAAK5B,SACpBC,OAAQsB,EACRrB,WAAOI,KAGT,EAAKqB,SAAS,CACZ5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,kQA5BE,wBAiCb,EAAKyB,SAAS,CACZ5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIAvCI,4C,6GA6Cf,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAML,cAAesC,KAAKtB,iBAC1B,kBAAC,EAAD,CACER,KAAM8B,KAAKxB,MAAMN,KACjBF,KAAMgC,KAAKxB,MAAMR,KACjBC,QAAS+B,KAAKxB,MAAMP,QACpBE,SAAU6B,KAAKxB,MAAML,SACrBC,OAAQ4B,KAAKxB,MAAMJ,OACnBC,MAAO2B,KAAKxB,MAAMH,e,GAtEd4B,iBCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,a","file":"static/js/main.424a5ba8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погодное приложение</h2>\r\n        <p>Узнайте погоду в вашем городе</p>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Info","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\" />\r\n        <button>Получить погоду</button>\r\n    </form>\r\n\r\n);\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeath\">\r\n        {props.city &&\r\n            <div>\r\n                <p>Местоположение: {props.city}, {props.country}</p>\r\n                <p>Температура: {props.temp} ℃</p>\r\n                <p>Давление: {props.pressure} гПа</p>\r\n                <p>Закат: {props.sunset}</p>\r\n            </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n\r\n    </div>\r\n);\r\n\r\nexport default Weather","import React, { PureComponent } from 'react';\r\nimport './App.css';\r\nimport Info from './Components/Info'\r\nimport Form from './Components/Form'\r\nimport Weather from './Components/Weather'\r\n\r\nconst API_KEY = 'fa13c7113b5346e7c1fd829e078ace41'\r\n\r\nclass App extends PureComponent {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    pressure: undefined,\r\n    sunset: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value\r\n    if (city) {\r\n      const api_url = await\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\r\n      const data = await api_url.json()\r\n      if (data.cod !== '404') {\r\n        let sunset = data.sys.sunset\r\n        let date = new Date()\r\n        date.setTime(sunset)\r\n        let sunset_date = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()\r\n\r\n        this.setState({\r\n          temp: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          pressure: data.main.pressure,\r\n          sunset: sunset_date,\r\n          error: undefined\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          pressure: undefined,\r\n          sunset: undefined,\r\n          error: 'Ввдите город на английском языке с большой буквы'\r\n        });\r\n      }\r\n\r\n    } else {\r\n      this.setState({\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: \"Введите название города\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n          <div className=\"info\">\r\n            <Info />\r\n          </div>\r\n          <div className=\"form\">\r\n            <Form weatherMethod={this.gettingWeather} />\r\n            <Weather\r\n              temp={this.state.temp}\r\n              city={this.state.city}\r\n              country={this.state.country}\r\n              pressure={this.state.pressure}\r\n              sunset={this.state.sunset}\r\n              error={this.state.error}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}